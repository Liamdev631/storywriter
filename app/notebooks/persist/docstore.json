{"docstore/metadata": {"3dab4b0a-ac4d-4622-a3f4-00c01e8b7eda": {"doc_hash": "dacf8c1bef2e61b56f6c3af7f4860c42585b4f382982e4e26e14b95fa4cef207"}, "214da2d1-a0a8-4d2f-a191-662ac2c2e995": {"doc_hash": "2a50b3df9fb5d36d15390fee0f6170077a4af47d191a88ad8ea6995bf1e7eb37"}, "ce3e15ad-4a74-4ea3-889f-44aeff52986c": {"doc_hash": "1be106e5c6b2d7b67e074b53646c0a21aaa83f943d2ba03e46527681b78e0109"}, "4bfd1c3f-18fb-4eac-b36b-20d3bdcd8c62": {"doc_hash": "cb1f091402d2c5854cca510d1ab5107f385dfb290ababf53f741c54d71d949c8"}, "01263144-7cd4-4e59-a90c-6fc72f264784": {"doc_hash": "78b191921b60fed268bfebce3db27cc63ab487a48f989ee5daeb873f0125b07f"}, "e16844a8-ea38-436c-98b7-4730df5bd751": {"doc_hash": "7a4483213d1ffe71635d9dc7af45ee978855876953563c64841b61000a681dca"}, "356eada9-e348-4156-ae98-5ee9d0ec5de3": {"doc_hash": "01cb5014ed022a388badb98a3076cd64aef9b84871e56fa2e705a5c962c9731b"}, "834f406f-4dfb-4316-b7c9-5644c61b1d75": {"doc_hash": "cb52ac72842806e73def4646807fb0589fb6cfef5d7a798a5f5a9e0a5513b19c"}, "9dd9bbff-a6d4-4b99-90ee-8c2f881e922c": {"doc_hash": "c6ec093a584336ebdab714924b76cc97c05578332bcbdf39ab61c40dd4e41c5f"}, "d6810523-4c1f-4bca-bbfe-59b880f36f3c": {"doc_hash": "0056112a135c06833b31e73cb1ded293f715c7b81494a46cbda78dff3ccde5f7"}, "7b6c07aa-c848-46d6-b052-78ea99ebebbb": {"doc_hash": "3112187bbf69924d78b990e02cbce7abf8462c9f84dc2cc058a2a721750deb1c"}, "eb11b86a-99d9-4785-baaa-44fd4fcaed4f": {"doc_hash": "0f0b1fb2c181e75780e38a4c141b59e14579291c947e7f94692c795d49537cdc"}, "3938db97-1f0e-47a0-b20f-72738a85ccc9": {"doc_hash": "824d104e34fde9d4ac58a02186c92ef25fe4f40e7a4fec5d48a6c710ffde6aa6"}, "c9710ccd-c1be-468a-a453-b1c860c3e313": {"doc_hash": "7c2db7814dbebb2e4291518622d6af0dd9834f697f2df633fb6d103984186518"}, "7d7fa672-7b49-465b-87db-fde9f2cae3e2": {"doc_hash": "dacf8c1bef2e61b56f6c3af7f4860c42585b4f382982e4e26e14b95fa4cef207"}, "fa30cfca-a89f-4e8d-8ab8-bcbcd95c1cf7": {"doc_hash": "2a50b3df9fb5d36d15390fee0f6170077a4af47d191a88ad8ea6995bf1e7eb37"}, "29cba26b-cb69-4970-b865-d0b29568f5b2": {"doc_hash": "1be106e5c6b2d7b67e074b53646c0a21aaa83f943d2ba03e46527681b78e0109"}, "4b3a4bed-64f6-4081-914a-8be70b002b04": {"doc_hash": "cb1f091402d2c5854cca510d1ab5107f385dfb290ababf53f741c54d71d949c8"}, "0f9a9656-6136-4bd9-9715-888f97b6c804": {"doc_hash": "78b191921b60fed268bfebce3db27cc63ab487a48f989ee5daeb873f0125b07f"}, "9b8962b8-817f-48dc-9cf1-2d58853f594a": {"doc_hash": "7a4483213d1ffe71635d9dc7af45ee978855876953563c64841b61000a681dca"}, "bf04faa9-b7ee-437c-91ae-e859985eb407": {"doc_hash": "01cb5014ed022a388badb98a3076cd64aef9b84871e56fa2e705a5c962c9731b"}, "89aeab84-9fe4-43cf-9877-f80f31399975": {"doc_hash": "cb52ac72842806e73def4646807fb0589fb6cfef5d7a798a5f5a9e0a5513b19c"}, "d00f5b20-ba82-436c-992e-959a90fc05dd": {"doc_hash": "c6ec093a584336ebdab714924b76cc97c05578332bcbdf39ab61c40dd4e41c5f"}, "78496d5e-91ae-4e40-bae6-f362a6618005": {"doc_hash": "0056112a135c06833b31e73cb1ded293f715c7b81494a46cbda78dff3ccde5f7"}, "f25446de-bb9f-4ec9-b2d0-e8941621f786": {"doc_hash": "3112187bbf69924d78b990e02cbce7abf8462c9f84dc2cc058a2a721750deb1c"}, "4a137df2-70d1-454d-afe7-48cfd2d2d2b3": {"doc_hash": "0f0b1fb2c181e75780e38a4c141b59e14579291c947e7f94692c795d49537cdc"}, "bfb4e348-2fe5-4a89-8044-adea347c134a": {"doc_hash": "824d104e34fde9d4ac58a02186c92ef25fe4f40e7a4fec5d48a6c710ffde6aa6"}, "06c43518-f657-4f55-bcb5-982e036e2763": {"doc_hash": "7c2db7814dbebb2e4291518622d6af0dd9834f697f2df633fb6d103984186518"}}, "docstore/data": {"7d7fa672-7b49-465b-87db-fde9f2cae3e2": {"__data__": {"text": "from models.lif import sc_lif, det_lif\n", "doc_id": "7d7fa672-7b49-465b-87db-fde9f2cae3e2", "embedding": null, "doc_hash": "dacf8c1bef2e61b56f6c3af7f4860c42585b4f382982e4e26e14b95fa4cef207", "extra_info": null, "node_info": {"start": 0, "end": 39}, "relationships": {"1": "3dab4b0a-ac4d-4622-a3f4-00c01e8b7eda"}}, "__type__": "1"}, "fa30cfca-a89f-4e8d-8ab8-bcbcd95c1cf7": {"__data__": {"text": "\n\n\nimport torch\nfrom models.lif import SC_LIFNeuron\nimport matplotlib.pyplot as plt\n\n# Check if GPU is available and set the device accordingly\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Current torch device: {device}\")\n\ndt: float = 1e-4\nruntime: float = 8\nnum_trials = 512\n\n# Record the data in arrays\ntimesteps: int = int(runtime / dt)\ntime = torch.linspace(start=0, end=runtime, steps=timesteps, device=device)\n\n# Define the size of the tensors based on the number of trials and timesteps\nV_sc_data = torch.zeros((timesteps, num_trials), dtype=torch.int32, device=device)\nspike_data = torch.zeros((timesteps, num_trials), dtype=torch.bool, device=device)\n\n# Initialize neuron state and input current\nsc_lif_neuron = SC_LIFNeuron(device=device, dt=dt, N=num_trials, T_ref=5e-3, B_V=5, G_L=20e-9)\nI = torch.linspace(start=0.0, end=sc_lif_neuron.I_max, steps=num_trials, dtype=torch.float32, device=device)\n\n# Simulate 1 second of activity for the stochastic neuron\nfor t in range(timesteps):\n\tsc_lif_neuron.step(I)\n\tif t == 0:\n\t\tprint(f'p(A)={sc_lif_neuron.A0}, p(B)={sc_lif_neuron.B0}')\n\tV_sc_data[t] = sc_lif_neuron.V\n\tspike_data[t] = sc_lif_neuron.firing\n\nV_sc_data = (sc_lif_neuron.stochastic_to_binary(V_sc_data)*1e3).T.detach().cpu()\nspike_data = spike_data.T.detach().cpu()\ntime = time.detach().cpu()\nI = I.detach().cpu()\n\n\n# ", "doc_id": "fa30cfca-a89f-4e8d-8ab8-bcbcd95c1cf7", "embedding": null, "doc_hash": "2a50b3df9fb5d36d15390fee0f6170077a4af47d191a88ad8ea6995bf1e7eb37", "extra_info": null, "node_info": {"start": 0, "end": 1369}, "relationships": {"1": "214da2d1-a0a8-4d2f-a191-662ac2c2e995"}}, "__type__": "1"}, "29cba26b-cb69-4970-b865-d0b29568f5b2": {"__data__": {"text": "\n\n\nspike_times_list = [torch.where(trial)[0] for trial in spike_data]\nspike_rates = [float(len(spikes)) / runtime for spikes in spike_times_list]\n\nplt.figure()\nplt.plot(I / sc_lif_neuron.I_max, spike_rates)\nplt.title('SC-LIF Tuning Curve')\nplt.xlabel('Current')\nplt.ylabel('Firing Rate [Hz]')\nplt.show()\n\n", "doc_id": "29cba26b-cb69-4970-b865-d0b29568f5b2", "embedding": null, "doc_hash": "1be106e5c6b2d7b67e074b53646c0a21aaa83f943d2ba03e46527681b78e0109", "extra_info": null, "node_info": {"start": 0, "end": 305}, "relationships": {"1": "ce3e15ad-4a74-4ea3-889f-44aeff52986c"}}, "__type__": "1"}, "4b3a4bed-64f6-4081-914a-8be70b002b04": {"__data__": {"text": "\n\n\nimport torch\nfrom models.lif import SC_LIFNeuron\nimport matplotlib.pyplot as plt\n\n# Check if GPU is available and set the device accordingly\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Current torch device: {device}\")\n\ndt: float = 1e-4\nruntime: float = 1\nnum_trials = 1\n\n# Record the data in arrays\ntimesteps: int = int(runtime / dt)\ntime = torch.linspace(start=0, end=runtime, steps=timesteps, device=device)\n\n# Define the size of the tensors based on the number of trials and timesteps\nV_sc_data = torch.zeros((timesteps, num_trials), dtype=torch.int32, device=device)\ndV_sc_data = torch.zeros((timesteps, num_trials), dtype=torch.int32, device=device)\nspike_data = torch.zeros((timesteps, num_trials), dtype=torch.bool, device=device)\n\n# Initialize neuron state and input current\nsc_lif_neuron = SC_LIFNeuron(device=device, dt=dt, N=num_trials, T_ref=5e-3, B_V=5, G_L=20e-9)\nI = torch.linspace(start=0.0, end=sc_lif_neuron.I_max, steps=num_trials, dtype=torch.float32, device=device)\n\n# Simulate 1 second of activity for the stochastic neuron\nfor t in range(timesteps):\n\tsc_lif_neuron.step(I)\n\tif t == 0:\n\t\tprint(f'p(A)={sc_lif_neuron.A0}, p(B)={sc_lif_neuron.B0}')\n\tV_sc_data[t] = sc_lif_neuron.V\n\tdV_sc_data[t] = sc_lif_neuron.dV\n\tspike_data[t] = sc_lif_neuron.firing\n\nV_sc_data = (sc_lif_neuron.stochastic_to_binary(V_sc_data)*1e3).T.detach().cpu()\ndV_sc_data = (sc_lif_neuron.stochastic_to_binary(dV_sc_data)*1e3).T.detach().cpu()\nspike_data = spike_data.T.detach().cpu()\ntime = time.detach().cpu()\nI = I.detach().cpu()\n\n\n# ", "doc_id": "4b3a4bed-64f6-4081-914a-8be70b002b04", "embedding": null, "doc_hash": "cb1f091402d2c5854cca510d1ab5107f385dfb290ababf53f741c54d71d949c8", "extra_info": null, "node_info": {"start": 0, "end": 1568}, "relationships": {"1": "4bfd1c3f-18fb-4eac-b36b-20d3bdcd8c62"}}, "__type__": "1"}, "0f9a9656-6136-4bd9-9715-888f97b6c804": {"__data__": {"text": "\n\n\nwindow_size: int = int(1e-3/dt)\nwindow = torch.ones(1, 1, window_size) / window_size\n\ndV_sc_data_smooth = dV_sc_data.flatten().unsqueeze(0)\ndV_sc_data_smooth = torch.nn.functional.conv1d(dV_sc_data_smooth, window, padding=window_size // 2).flatten()[0:-1]\n\nV_sc_data_smooth = V_sc_data.flatten().unsqueeze(0)\nV_sc_data_smooth = torch.nn.functional.conv1d(V_sc_data_smooth, window, padding=window_size // 2).flatten()[0:-1]\n\n\n# ", "doc_id": "0f9a9656-6136-4bd9-9715-888f97b6c804", "embedding": null, "doc_hash": "78b191921b60fed268bfebce3db27cc63ab487a48f989ee5daeb873f0125b07f", "extra_info": null, "node_info": {"start": 0, "end": 430}, "relationships": {"1": "01263144-7cd4-4e59-a90c-6fc72f264784"}}, "__type__": "1"}, "9b8962b8-817f-48dc-9cf1-2d58853f594a": {"__data__": {"text": "\n\n\n# Plot\nplt.figure()\nplt.plot(V_sc_data_smooth, dV_sc_data_smooth)\nplt.xlabel('V (mV)')\nplt.ylabel('dV (mV)')\nplt.title('Phase plot of V vs dV')\nplt.ylim(-76,-74)\nplt.show()\n\n", "doc_id": "9b8962b8-817f-48dc-9cf1-2d58853f594a", "embedding": null, "doc_hash": "7a4483213d1ffe71635d9dc7af45ee978855876953563c64841b61000a681dca", "extra_info": null, "node_info": {"start": 0, "end": 177}, "relationships": {"1": "e16844a8-ea38-436c-98b7-4730df5bd751"}}, "__type__": "1"}, "bf04faa9-b7ee-437c-91ae-e859985eb407": {"__data__": {"text": "\n\n\nimport torch\nfrom models.lif import SC_LIFNeuron\nimport matplotlib.pyplot as plt\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Current torch device: {device}\")\n\ndt: float = 1e-4\nruntime: float = 1\nnum_trials: int = 5\n\ntimesteps: int = int(runtime / dt)\ntime = torch.linspace(start=0, end=runtime, steps=timesteps, device=device)\nfreq = torch.linspace(start=2, end=20, steps=num_trials, device=device)\n\nV_sc_data = torch.zeros((timesteps, num_trials), dtype=torch.int32, device=device)\nspike_data = torch.zeros((timesteps, num_trials), dtype=torch.bool, device=device)\n\nsc_lif_neuron = SC_LIFNeuron(device=device, dt=dt, N=num_trials, T_ref=5e-3, B_V=5, G_L=20e-9)\n\nfor t in range(timesteps):\n    if t == 0:\n        print(f'p(A)={sc_lif_neuron.A0}, p(B)={sc_lif_neuron.B0}')\n    \n    curr: torch.Tensor = torch.sin(2*torch.pi*t*freq*dt) * sc_lif_neuron.I_max\n    sc_lif_neuron.step(curr)\n    V_sc_data[t] = sc_lif_neuron.V\n    spike_data[t] = sc_lif_neuron.firing\n\nV_sc_data = (sc_lif_neuron.stochastic_to_binary(V_sc_data)*1e3).T.detach().cpu()\nspike_data = spike_data.T.detach().cpu()\ntime = time.detach().cpu()\nfreq = freq.detach().cpu()\n\n\n# ", "doc_id": "bf04faa9-b7ee-437c-91ae-e859985eb407", "embedding": null, "doc_hash": "01cb5014ed022a388badb98a3076cd64aef9b84871e56fa2e705a5c962c9731b", "extra_info": null, "node_info": {"start": 0, "end": 1180}, "relationships": {"1": "356eada9-e348-4156-ae98-5ee9d0ec5de3"}}, "__type__": "1"}, "89aeab84-9fe4-43cf-9877-f80f31399975": {"__data__": {"text": "\n\n\nneurons_to_show = 2\nplt.figure(figsize=(8,3))\nplt.plot(time, V_sc_data[neurons_to_show])\nplt.xlabel('Time (s)')\nplt.ylabel('Membrane Potential (mV)')\nplt.title('SC-LIF Neuron Response to Sinusoidal Input')\nplt.show()\n\n\n# ", "doc_id": "89aeab84-9fe4-43cf-9877-f80f31399975", "embedding": null, "doc_hash": "cb52ac72842806e73def4646807fb0589fb6cfef5d7a798a5f5a9e0a5513b19c", "extra_info": null, "node_info": {"start": 0, "end": 224}, "relationships": {"1": "834f406f-4dfb-4316-b7c9-5644c61b1d75"}}, "__type__": "1"}, "d00f5b20-ba82-436c-992e-959a90fc05dd": {"__data__": {"text": "\n\n\nspike_times_list = [torch.where(spikes)[0] for spikes in spike_data]\n\n# Plot spikes\nplt.figure(figsize=(8,3))\nplt.eventplot(spike_times_list, orientation='horizontal', colors='black', linelengths=0.8)\nplt.title('Neuron Spike Times')\nplt.xlabel('Timesteps')\nplt.yticks([])  # Hide the y-axis as it's not meaningful in this plot\nplt.show()\n\n\n# ", "doc_id": "d00f5b20-ba82-436c-992e-959a90fc05dd", "embedding": null, "doc_hash": "c6ec093a584336ebdab714924b76cc97c05578332bcbdf39ab61c40dd4e41c5f", "extra_info": null, "node_info": {"start": 0, "end": 345}, "relationships": {"1": "9dd9bbff-a6d4-4b99-90ee-8c2f881e922c"}}, "__type__": "1"}, "78496d5e-91ae-4e40-bae6-f362a6618005": {"__data__": {"text": "\n\n\n# Reconstruct input signal from spikes using causal response filter\ntau = 50e-3\nfilter_size: int = int(tau / dt)\nfilter_weights: torch.Tensor = torch.exp(-torch.arange(filter_size) * dt / tau) * torch.arange(filter_size) * dt / tau**2\nfilter_weights = filter_weights.to(device)\nfilter_weights = filter_weights / filter_weights.sum()\n\nreconstructed_input = torch.zeros((timesteps, num_trials), dtype=torch.float32, device=device)\nfor i, spikes in enumerate(spike_data):\n    spike_times = torch.where(spikes)[0]\n    for spike_time in spike_times:\n        spike_time = spike_time\n        start_idx: int = max(0, spike_time - filter_size + 1) # type: ignore\n        end_idx = spike_time + 1\n        reconstructed_input[start_idx:end_idx, i] += filter_weights[:end_idx-start_idx]\n\nreconstructed_input = (reconstructed_input / dt).T.detach().cpu()\n\nmax_reconstructed_value = torch.max(reconstructed_input[neurons_to_show])\n\n# Plot reconstructed input signal\nplt.figure()\nplt.plot(time, reconstructed_input[neurons_to_show])\nplt.plot(time, torch.sin(2 * torch.pi * time * freq[neurons_to_show]) * max_reconstructed_value)\nplt.xlabel('Time [s]')\nplt.ylabel('Firing Rate [Hz]')\nplt.title('Reconstructed Input Signal from Spikes')\nplt.xlim(time[-1] * 0.25, time[-1] * 0.75)\nplt.show();\n\n\n# ", "doc_id": "78496d5e-91ae-4e40-bae6-f362a6618005", "embedding": null, "doc_hash": "0056112a135c06833b31e73cb1ded293f715c7b81494a46cbda78dff3ccde5f7", "extra_info": null, "node_info": {"start": 0, "end": 1283}, "relationships": {"1": "d6810523-4c1f-4bca-bbfe-59b880f36f3c"}}, "__type__": "1"}, "f25446de-bb9f-4ec9-b2d0-e8941621f786": {"__data__": {"text": "\n\n\nplt.figure()\nplt.plot(torch.arange(len(filter_weights)) * dt * 1e3, filter_weights.detach().cpu())\nplt.xlabel('Time [ms]')\nplt.ylabel(\"$I_{psp}$\");\n\n", "doc_id": "f25446de-bb9f-4ec9-b2d0-e8941621f786", "embedding": null, "doc_hash": "3112187bbf69924d78b990e02cbce7abf8462c9f84dc2cc058a2a721750deb1c", "extra_info": null, "node_info": {"start": 0, "end": 152}, "relationships": {"1": "7b6c07aa-c848-46d6-b052-78ea99ebebbb"}}, "__type__": "1"}, "4a137df2-70d1-454d-afe7-48cfd2d2d2b3": {"__data__": {"text": "\n\n\nimport torch\nfrom models.lif import SC_LIFNeuron\nimport matplotlib.pyplot as plt\n\n# Check if GPU is available and set the device accordingly\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Current torch device: {device}\")\n\ndt: float = 1e-4\nruntime: float = 0.1\nnum_trials = 6\n\n# Record the data in arrays\ntimesteps: int = int(runtime / dt)\ntime = torch.linspace(start=0, end=runtime, steps=timesteps, device=device)\n\n# Define the size of the tensors based on the number of trials and timesteps\nV_sc_data = torch.zeros((timesteps, num_trials), dtype=torch.int32, device=device)\nspike_data = torch.zeros((timesteps, num_trials), dtype=torch.bool, device=device)\n\n# Initialize neuron state and input current\nsc_lif_neuron = SC_LIFNeuron(device=device, dt=dt, N=num_trials, T_ref=5e-3, B_V=5, G_L=20e-9)\nI = torch.linspace(start=0.0, end=sc_lif_neuron.I_max, steps=num_trials, dtype=torch.float32, device=device)\n\n# Simulate 1 second of activity for the stochastic neuron\nfor t in range(timesteps):\n\tsc_lif_neuron.step(I)\n\tif t == 0:\n\t\tprint(f'p(A)={sc_lif_neuron.A0}, p(B)={sc_lif_neuron.B0}')\n\tV_sc_data[t] = sc_lif_neuron.V\n\tspike_data[t] = sc_lif_neuron.firing\n\t#V_det_data[t] = V_det.detach()\n\nV_sc_data = (sc_lif_neuron.stochastic_to_binary(V_sc_data)*1e3).T.detach().cpu()\nspike_data = spike_data.T.detach().cpu()\ntime = time.detach().cpu()\n\n\n# ", "doc_id": "4a137df2-70d1-454d-afe7-48cfd2d2d2b3", "embedding": null, "doc_hash": "0f0b1fb2c181e75780e38a4c141b59e14579291c947e7f94692c795d49537cdc", "extra_info": null, "node_info": {"start": 0, "end": 1381}, "relationships": {"1": "eb11b86a-99d9-4785-baaa-44fd4fcaed4f"}}, "__type__": "1"}, "bfb4e348-2fe5-4a89-8044-adea347c134a": {"__data__": {"text": "\n\n\n# Create a matplotlib figure\nfig = plt.figure(figsize=(8,3))\n\n# Add line trace for recorded data\nneurons_to_show = [0,3,-1]\nfor i, V_sc in enumerate(V_sc_data[neurons_to_show]):\n    plt.step(x=time, y=V_sc, alpha=0.5)\n\n# plt.hlines(y=sc_lif_neuron.V_reset, label='V_R', xmin=time[0], xmax=time[-1])\n# plt.hlines(y=sc_lif_neuron.V_th, label='V_Th', xmin=time[0], xmax=time[-1])\n# plt.hlines(y=sc_lif_neuron.E_L, label='E_L', xmin=time[0], xmax=time[-1])\n\nplt.title(\"Multiple-Neuron Membrane Potential Trace\")\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Voltage (mV)\")\n\n# Display the figure\nplt.show()\n\n\n# ", "doc_id": "bfb4e348-2fe5-4a89-8044-adea347c134a", "embedding": null, "doc_hash": "824d104e34fde9d4ac58a02186c92ef25fe4f40e7a4fec5d48a6c710ffde6aa6", "extra_info": null, "node_info": {"start": 0, "end": 598}, "relationships": {"1": "3938db97-1f0e-47a0-b20f-72738a85ccc9"}}, "__type__": "1"}, "06c43518-f657-4f55-bcb5-982e036e2763": {"__data__": {"text": "\n\n\n# Prepare a list of tensors with the indices of the spike times for each trial\nspike_times_list = [torch.where(trial)[0] for trial in spike_data]\n\n# Plot spikes\nplt.figure(figsize=(8,3))\nplt.eventplot(spike_times_list, orientation='horizontal', colors='black', linelengths=0.8)\nplt.title('Neuron Spike Times')\nplt.xlabel('Timesteps')\nplt.yticks([])  # Hide the y-axis as it's not meaningful in this plot\nplt.show()\n\n", "doc_id": "06c43518-f657-4f55-bcb5-982e036e2763", "embedding": null, "doc_hash": "7c2db7814dbebb2e4291518622d6af0dd9834f697f2df633fb6d103984186518", "extra_info": null, "node_info": {"start": 0, "end": 419}, "relationships": {"1": "c9710ccd-c1be-468a-a453-b1c860c3e313"}}, "__type__": "1"}}}